Greedy Algorithm - Summary and Classic Problems

----------------------------------------------------
1. Overview of Greedy Algorithm
----------------------------------------------------
1) The most intuitive and natural algorithmic strategy.
2) Always makes the locally optimal choice at each step with the hope of finding a global optimum.
3) The challenge lies in proving that the local optimal strategy leads to a globally optimal solution.
4) Learning greedy algorithms is mainly about building experience through problem solving.

----------------------------------------------------
2. Lexicographical Order - Problem Description
----------------------------------------------------
- Given an array of strings `strs`, concatenate all strings in some order such that the result is the lexicographically smallest string.
- Lexicographical rules:
  1. If strings are of the same length, compare ASCII codes directly.
  2. If lengths differ, pad the shorter with the lowest ASCII character (for thought experiment only).

- Key strategy: sort using a custom comparator:
  Comparator: (s1 + s2).compareTo(s2 + s1)

- Important point: Sorting strategy must be transitive to ensure correctness.

----------------------------------------------------
3. Standard Process of Solving with Greedy Algorithm
----------------------------------------------------
1) Understand the business logic of the problem.
2) Derive multiple greedy strategies based on the logic.
3) Try to find counterexamples to each strategy. If no counterexample is found, attempt a proof.
4) Proofs are often difficult and math-heavy. Many problems rely on empirical verification.

----------------------------------------------------
4. Greedy Algorithm Problem-Solving Template
----------------------------------------------------
1) Implement a brute-force solution (non-greedy) as baseline.
2) Imagine greedy strategies A, B, C...
3) Compare results of brute-force and greedy strategies using test cases (with a comparator).
4) Do not get stuck trying to prove correctness of greedy; empirical validation is acceptable in practice.

----------------------------------------------------
5. Problem: Lighting Minimum Lamps
----------------------------------------------------
- Given a string `str` consisting of characters 'X' (wall) and '.' (house).
- A lamp placed at position i can light up i-1, i, and i+1.
- 'X' cannot hold lamps and does not need to be lit.
- Goal: return the minimum number of lamps needed to light up all '.' positions.

Greedy Strategy:
- Traverse the string from left to right.
- When you find a '.', place a lamp at position i+1 to cover i, i+1, i+2.
- Then skip to i+3.

----------------------------------------------------
6. Problem: Minimum Cost to Cut Gold Bar
----------------------------------------------------
- Cutting a gold bar of length N costs N copper coins per cut.
- Given array [10, 20, 30], representing the desired segments.
- Find the minimum cost to divide the gold bar accordingly.

Greedy Strategy:
- Always cut the two smallest segments first (Huffman Coding strategy).
- Use a min-heap (priority queue) to greedily combine smallest lengths.
- Total cost is the sum of each combination.

----------------------------------------------------
7. Problem: Maximum Number of Non-Overlapping Meetings
----------------------------------------------------
- Given arrays of start and end times for multiple events.
- Only one event can be held at a time.
- Return the maximum number of events that can be scheduled.

Greedy Strategy:
- Sort events by end time.
- Always choose the event with the earliest end time that doesn't conflict with previously selected events.

----------------------------------------------------
8. Problem: Maximizing Project Profits
----------------------------------------------------
- Given:
  - `costs[i]`: the cost to start project i
  - `profits[i]`: the net profit after completing project i
  - `K`: max number of projects you can take (sequentially)
  - `M`: initial capital

Rules:
- Each project is done one at a time.
- Once a project is done, its profit is added to your capital.
- You can only do a project if your current capital is >= its cost.

Greedy Strategy:
- Maintain two heaps:
  - A min-heap for costs (projects you canâ€™t afford yet)
  - A max-heap for profits (projects you can afford)
- For up to K times:
  - Move all affordable projects from cost-heap to profit-heap.
  - If profit-heap is not empty, take the project with max profit.
  - Else, break (you can't afford any more projects).

----------------------------------------------------
End of Notes
----------------------------------------------------
