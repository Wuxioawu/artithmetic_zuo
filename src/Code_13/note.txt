Disjoint Set Union (Union-Find)

Overview:
1. You have several elements a, b, c, d... of type V.
2. Initially, each element is in its own separate set.
3. You can call the following methods at any time:
   - boolean isSameSet(V x, V y): Check if elements x and y belong to the same set.
   - void union(V x, V y): Merge the sets containing x and y.
4. Goal: Make isSameSet and union as efficient as possible.

Basic Implementation:
1. Each node has a pointer to its parent.
2. The root node (which points to itself) is the representative of the set.
3. To check if two elements are in the same set, find their roots and compare them.
4. To merge two sets, attach the smaller set’s root to the larger set’s root.

Optimizations:
1. Path Compression: While finding the representative/root of a node, make all nodes along the path point directly to the root to flatten the structure.
2. Union by Size: Always attach the smaller set under the larger one to maintain a shallow tree.
3. With both optimizations, each operation has nearly constant time complexity, O(1) amortized.

Applications:
- Used to solve region merge problems.
- Commonly used in graph algorithms like Kruskal’s MST.
- Efficient for tracking connected components.

Common Problems Using Union-Find:
1. Leetcode 547: Friend Circles (Number of Connected Components).

2. Island Counting:
   - Given a 2D matrix with 0s and 1s.
   - Adjacent 1s (up, down, left, right) form an island.
   - Count how many islands exist in the matrix.
3. Advanced Island Problems:
   - Leetcode 305: Number of Islands II.
   - Parallel computing design for extremely large matrices.

Union-Find is powerful for connectivity problems and efficiently handles dynamic grouping of elements.



