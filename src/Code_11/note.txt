ðŸ§  Binary Tree Recursive Framework (for Tree DP Problems)
This is a universal recursive pattern that can solve most binary tree problems in coding interviews, especially those involving Tree DP (Dynamic Programming on Trees).
The core idea is to leverage recursion's natural ability to traverse trees and extract structured information from each subtree.


ðŸ“Œ Step-by-Step Framework:
1.Assume you are at a node X, and you can get any information from X.left and X.right.
2.Based on that assumption, analyze all the ways the subtree rooted at X might contribute to the final answer.
ðŸ‘‰ This step is the most important: analyze how the current root participates in the global result.
3.After listing all possibilities, decide what kind of information you need from the left and right subtrees.
4.Define a custom structure S that contains all the information a subtree must return to its parent.
ðŸ‘‰ This "Info" structure helps in propagating necessary data upward.
5.Design the recursive function to return S, and ensure every subtree returns the same kind of structure.
6.Implement the logic in code:
Call the recursive function on left and right
Use the returned S objects to compute the result for the current node X


âœ… Benefits:
Modular Design: Makes your solution clean and easy to debug.
Scalability: Easy to extend to solve variations of tree problems.
Best Fit for: Maximum path sum, lowest common ancestor, diameter of binary tree, largest BST subtree, party happiness problem, etc.


Binary Tree Interview Notes (English Version)

------------------------------------------
1. Check if a Binary Tree is a Complete Binary Tree
------------------------------------------
Conditions:
- If a node has a right child but no left child â†’ Not a complete binary tree.
- Once a node is found that is not full (does not have both children), all subsequent nodes must be leaf nodes.

Approach:
- Use level-order traversal (BFS).
- Traverse node by node and check the above conditions.

------------------------------------------
2. Check if a Binary Tree is a Binary Search Tree (BST)
------------------------------------------
Definition:
- For every subtree, the left subtree nodes must be less than the root, and the right subtree nodes must be greater than the root.
- A standard BST does not contain duplicate values.

Approach 1:
- In-order traversal: verify the result is a strictly increasing sequence.

Approach 2:
- Use recursion (tree DP): Return min, max, isBST for each subtree and validate recursively.

------------------------------------------
3. Check if a Binary Tree is a Balanced Binary Tree
------------------------------------------
Definition:
- For every node, the height difference between left and right subtree must not exceed 1.

Approach:
- Use recursion to return:
    - height of subtree
    - whether the subtree is balanced

------------------------------------------
4. Check if a Binary Tree is a Full Binary Tree
------------------------------------------
Definition:
- A full binary tree of height h has exactly 2^h - 1 nodes.

Approach:
- Calculate the height and total number of nodes.
- Check if node count == 2^height - 1.

------------------------------------------
5. Find the Size of the Largest BST Subtree in a Binary Tree
------------------------------------------
Approach:
- Use recursive tree DP.
- For each node, return:
    - whether it is a BST
    - size of subtree
    - min and max values in the subtree
    - max size of BST found so far

------------------------------------------
6. Find the Maximum Distance Between Any Two Nodes in a Binary Tree
------------------------------------------
Definition:
- The distance between any two nodes is the number of edges in the path.

Approach:
- For each node, use recursion to return:
    - height
    - max distance found in the subtree
- Distance through a node = leftHeight + rightHeight + 1

------------------------------------------
7. Determine if a Binary Tree is Complete Using Recursive Method
------------------------------------------
Recursive Approach:
- For each subtree, return:
    - height
    - whether it is full
    - whether it is complete
- Combine left and right subtree info to determine completeness

------------------------------------------
8. Find the Root of the Largest BST Subtree in a Binary Tree
------------------------------------------
Same as problem #5, but return the root node of the largest BST subtree instead of its size.

------------------------------------------
9. Lowest Common Ancestor (LCA) of Two Nodes in a Binary Tree
------------------------------------------
Approach 1:
- Use HashMap to record each node's parent.
- Traverse up from node a and store ancestors in HashSet.
- Traverse from node b until you find a node in the HashSet.

Approach 2 (Recursive):
- If root is a or b, return root.
- Recursively find LCA in left and right subtree.

------------------------------------------
10. Party Maximum Happiness Problem (Tree DP on N-ary Tree)
------------------------------------------
Class Definition:
class Employee {
    public int happy;
    List<Employee> subordinates;
}

Rules:
1. If an employee attends, their direct subordinates cannot.
2. Total happiness is the sum of attending employees' happiness.
3. Goal: Maximize total happiness.

Approach:
- Use recursive tree DP.
- For each employee, return:
    - max happiness if they attend
    - max happiness if they do not attend
- Combine results for each subtree to determine the global maximum.
